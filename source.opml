<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Wed, 10 Mar 2021 20:44:17 GMT -->
<opml version="2.0">
	<head>
		<title>config.nodeEditor.projects.docServer.scripts</title>
		<dateCreated>Wed, 03 Mar 2021 15:24:50 GMT</dateCreated>
		<dateModified>Wed, 10 Mar 2021 20:44:17 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 3</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>75</windowTop>
		<windowLeft>990</windowLeft>
		<windowBottom>1070</windowBottom>
		<windowRight>1865</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/docserver/">
			<outline text="notes.txt" created="Wed, 10 Mar 2021 20:35:24 GMT">
				<outline text="3/10/21; 3:35:17 PM by DW" created="Wed, 10 Mar 2021 20:35:15 GMT">
					<outline text="DocServer used to have a server, but it became a self-contained app, no server needed" created="Wed, 10 Mar 2021 20:34:56 GMT"/>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;docserver&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Browse scripting verbs in a web app.&quot;," created="Wed, 10 Mar 2021 20:27:27 GMT"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;main&quot;: &quot;docserver.js&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveappserver&quot;: &quot;*&quot;,"/>
						<outline text="&quot;opmltojs&quot;: &quot;*&quot;,"/>
						<outline text="&quot;request&quot;: &quot;*&quot;"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="docserver.js">
				<outline text="var myVersion = &quot;0.4.0&quot;, myProductName = &quot;docServer&quot;;" created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text=""/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const opmlToJs = require (&quot;opmltojs&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const daveappserver = require (&quot;daveappserver&quot;); "/>
				<outline text="" created="Sun, 28 Feb 2021 16:17:49 GMT"/>
				<outline text="const urlDocsOpml = &quot;http://docs.littleoutliner.com/davewiner/verbDocs.opml?format=opml&quot;;" created="Sun, 28 Feb 2021 16:17:50 GMT"/>
				<outline text="var docserverOutline;" created="Sun, 28 Feb 2021 17:27:10 GMT"/>
				<outline text="" created="Sun, 28 Feb 2021 16:19:54 GMT"/>
				<outline text="var appOptions = {">
					<outline text="productName: myProductName, "/>
					<outline text="productNameForDisplay: &quot;DocServer&quot;,"/>
					<outline text="version: myVersion,"/>
					<outline text="flWebsocketEnabled: false,"/>
					<outline text="everySecond,"/>
					<outline text="everyMinute,"/>
					<outline text="httpRequest: handleHttpRequest,"/>
					<outline text="addMacroToPagetable: function (pagetable) {">
						<outline text="pagetable.slogan = utils.getRandomSnarkySlogan ();"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="var config = {">
					<outline text="port: process.env.PORT || 1824,"/>
					<outline text="websocketPort: 1826,"/>
					<outline text="usersFolder: &quot;data/users/&quot;," isComment="true"/>
					<outline text="fnamePrefs: &quot;prefs.json&quot;, //each user's prefs file" isComment="true"/>
					<outline text="fnameStats: &quot;data/stats.json&quot;"/>
					<outline text="};"/>
					</outline>
				<outline text="var stats = {">
					<outline text="productName: myProductName,"/>
					<outline text="version: myVersion"/>
					<outline text="};"/>
					</outline>
				<outline text=""/>
				<outline text="function statsChanged () {">
					<outline text="daveappserver.saveStats (stats);"/>
					<outline text="}"/>
					</outline>
				<outline text="function getPrefs (screenname, callback) {" isComment="true">
					<outline text="Changes" isComment="true">
						<outline text="1/28/18; 1:58:14 PM by DW">
							<outline text="This is the initial call of the SYO client to the server. We return the information it needs to startup in one package. "/>
							</outline>
						</outline>
					<outline text="var myPrefs = {">
						<outline text="screenname: screenname"/>
						<outline text="};"/>
						</outline>
					<outline text="var folder = config.usersFolder + screenname + &quot;/&quot;;"/>
					<outline text="var prefsFile = folder + config.fnamePrefs;"/>
					<outline text="console.log (&quot;getPrefs: screenname == &quot; + screenname + &quot;, prefsFile == &quot; + prefsFile);" isComment="true"/>
					<outline text="utils.sureFilePath (prefsFile, function () {">
						<outline text="fs.readFile (prefsFile, function (err, data) {">
							<outline text="if (err) {">
								<outline text="myPrefs.prefs = new Object ();"/>
								<outline text="callback (undefined, myPrefs); //return an empty prefs struct"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="try {">
									<outline text="myPrefs.prefs = JSON.parse (data.toString ());"/>
									<outline text="callback (undefined, myPrefs);"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;getPrefs: err.message == &quot; + err.message);"/>
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function savePrefs (screenname, jsontext, callback) {" isComment="true">
					<outline text="var prefsFile = config.usersFolder + screenname + &quot;/&quot; + config.fnamePrefs;"/>
					<outline text="console.log (&quot;savePrefs: screenname == &quot; + screenname + &quot;, jsontext == &quot; + jsontext);" isComment="true"/>
					<outline text="utils.sureFilePath (prefsFile, function () {">
						<outline text="fs.writeFile (prefsFile, jsontext, function (err) {">
							<outline text="callback (err, true);"/>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="" created="Wed, 03 Mar 2021 15:44:24 GMT"/>
				<outline text="function getVerbPageHtml (thePageOutline, callback) {">
					<outline text="var config = daveappserver.getConfig ();" created="Mon, 01 Mar 2021 16:58:54 GMT"/>
					<outline text="" created="Mon, 01 Mar 2021 19:21:48 GMT"/>
					<outline text="function getOutlineHtml (thePageOutline) {" created="Mon, 01 Mar 2021 19:21:48 GMT">
						<outline text="var htmltext = &quot;&quot;, level = 0;" created="Mon, 01 Mar 2021 19:22:01 GMT"/>
						<outline text="function add (s) {" created="Mon, 01 Mar 2021 19:22:02 GMT">
							<outline text="htmltext += utils.filledString (&quot;\t&quot;, level) + s + &quot;\n&quot;;" created="Mon, 01 Mar 2021 19:23:01 GMT"/>
							<outline text="}" created="Mon, 01 Mar 2021 19:23:00 GMT"/>
							</outline>
						<outline text="add (&quot;&lt;div class=\&quot;dsTitle\&quot;&gt;&quot; + thePageOutline.text + &quot;&lt;/div&gt;&quot;);" created="Mon, 01 Mar 2021 19:22:02 GMT"/>
						<outline text="add (&quot;&lt;div class=\&quot;dsOrangeLine\&quot;&gt;&lt;/div&gt;&quot;);" created="Mon, 01 Mar 2021 19:22:02 GMT"/>
						<outline text="add (&quot;&lt;div class=\&quot;dsBody\&quot;&gt;&quot;); level++;" created="Mon, 01 Mar 2021 19:32:04 GMT"/>
						<outline text="thePageOutline.subs.forEach (function (item) {" created="Mon, 01 Mar 2021 19:24:28 GMT">
							<outline text="add (&quot;&lt;div class=\&quot;dsSection\&quot;&gt;&quot;); level++;" created="Wed, 03 Mar 2021 16:01:34 GMT"/>
							<outline text="add (&quot;&lt;div class=\&quot;dsSectionTitle\&quot;&gt;&quot; + item.text + &quot;&lt;/div&gt;&quot;);" created="Mon, 01 Mar 2021 19:22:02 GMT"/>
							<outline text="add (&quot;&lt;div class=\&quot;dsSectionText\&quot;&gt;&quot;); level++;" created="Mon, 01 Mar 2021 19:32:04 GMT"/>
							<outline text="item.subs.forEach (function (item) {" created="Mon, 01 Mar 2021 19:25:37 GMT">
								<outline text="add (&quot;&lt;p class=\&quot;dsSectionPgf\&quot;&gt;&quot; + item.text + &quot;&lt;/p&gt;&quot;);" created="Mon, 01 Mar 2021 19:22:02 GMT"/>
								<outline text="});" created="Mon, 01 Mar 2021 19:25:58 GMT"/>
								</outline>
							<outline text="add (&quot;&lt;/div&gt;&quot;); level--;" created="Mon, 01 Mar 2021 19:27:08 GMT"/>
							<outline text="add (&quot;&lt;/div&gt;&quot;); level--;" created="Mon, 01 Mar 2021 19:27:08 GMT"/>
							<outline text="});" created="Mon, 01 Mar 2021 19:24:46 GMT"/>
							</outline>
						<outline text="add (&quot;&lt;/div&gt;&quot;); level--;" created="Mon, 01 Mar 2021 19:27:08 GMT"/>
						<outline text="return (htmltext);" created="Mon, 01 Mar 2021 19:27:45 GMT"/>
						<outline text="}" created="Mon, 01 Mar 2021 19:21:56 GMT"/>
						</outline>
					<outline text="" created="Mon, 01 Mar 2021 19:21:49 GMT"/>
					<outline text="request (config.urlServerHomePageSource, function (error, response, templatetext) {">
						<outline text="if (!error &amp;&amp; response.statusCode == 200) {">
							<outline text="var pagetable = {">
								<outline text="productName: config.productName, "/>
								<outline text="productNameForDisplay: config.productNameForDisplay, "/>
								<outline text="version: config.version,"/>
								<outline text="urlServerForClient: config.urlServerForClient,"/>
								<outline text="urlWebsocketServerForClient: config.urlWebsocketServerForClient,"/>
								<outline text="flEnableLogin: config.flEnableLogin,"/>
								<outline text="prefsPath: config.prefsPath,"/>
								<outline text="docsPath: config.docsPath,"/>
								<outline text="outlineJson: utils.jsonStringify (thePageOutline)," created="Mon, 01 Mar 2021 17:05:28 GMT"/>
								<outline text="outlineHtml: getOutlineHtml (thePageOutline)" created="Mon, 01 Mar 2021 19:21:25 GMT"/>
								<outline text="};"/>
								</outline>
							<outline text="var pagetext = utils.multipleReplaceAll (templatetext, pagetable, false, &quot;[%&quot;, &quot;%]&quot;);"/>
							<outline text="callback (undefined, pagetext);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {" created="Wed, 03 Mar 2021 15:56:58 GMT">
							<outline text="callback ({&quot;message&quot;: &quot;Can't view the verb page because the template couldn't be read.&quot;});" created="Wed, 03 Mar 2021 15:57:11 GMT"/>
							<outline text="}" created="Wed, 03 Mar 2021 15:57:10 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function handleHttpRequest (theRequest) {">
					<outline text="var params = theRequest.params, now = new Date ();"/>
					<outline text="var token = (params.oauth_token !== undefined) ? params.oauth_token : undefined;"/>
					<outline text="var secret = (params.oauth_token_secret !== undefined) ? params.oauth_token_secret : undefined;"/>
					<outline text="function returnPlainText (s) {">
						<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, s.toString ());"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnHtml (htmltext) {">
						<outline text="theRequest.httpReturn (200, &quot;text/html&quot;, htmltext.toString ());"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnError (jstruct) {">
						<outline text="theRequest.httpReturn (500, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnData (jstruct) {">
						<outline text="Changes" isComment="true">
							<outline text="12/24/20; 3:01:25 PM by DW">
								<outline text="Externally what we call listName is called username. "/>
								</outline>
							</outline>
						<outline text="if (jstruct === undefined) {">
							<outline text="jstruct = {};"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (jstruct.listName !== undefined) {">
								<outline text="jstruct.username = jstruct.listName;"/>
								<outline text="delete jstruct.listName;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
						<outline text="}"/>
						</outline>
					<outline text="function httpReturn (err, jstruct) {">
						<outline text="if (err) {">
							<outline text="returnError (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="returnData (jstruct);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function serveVerbPage (thePageOutline) {">
						<outline text="getVerbPageHtml (thePageOutline, function (err, htmltext) {" created="Wed, 03 Mar 2021 15:55:56 GMT">
							<outline text="if (err) {" created="Wed, 03 Mar 2021 15:57:54 GMT">
								<outline text="returnError (err);" created="Wed, 03 Mar 2021 15:57:57 GMT"/>
								<outline text="}" created="Wed, 03 Mar 2021 15:58:01 GMT"/>
								</outline>
							<outline text="else {" created="Wed, 03 Mar 2021 15:58:02 GMT">
								<outline text="returnHtml (htmltext);" created="Wed, 03 Mar 2021 15:56:22 GMT"/>
								<outline text="}" created="Wed, 03 Mar 2021 15:58:06 GMT"/>
								</outline>
							<outline text="});" created="Wed, 03 Mar 2021 15:56:06 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="" created="Sun, 28 Feb 2021 17:19:22 GMT"/>
					<outline text="console.log (&quot;handleHttpRequest: theRequest.lowerpath == &quot; + theRequest.lowerpath);" created="Sun, 28 Feb 2021 17:19:22 GMT"/>
					<outline text="" created="Sun, 28 Feb 2021 19:47:48 GMT"/>
					<outline text="var flhandled = false;" created="Mon, 01 Mar 2021 17:02:25 GMT"/>
					<outline text="function findsub (sublist, lookfor, flfullmatch, callback) {" created="Sun, 28 Feb 2021 19:54:30 GMT">
						<outline text="for (var i = 0; i &lt; sublist.length; i++) {" created="Sun, 28 Feb 2021 19:54:59 GMT">
							<outline text="var item = sublist [i];" created="Sun, 28 Feb 2021 19:56:55 GMT"/>
							<outline text="var itemtext = utils.stringLower (utils.replaceAll (utils.replaceAll (item.text, &quot;.&quot;, &quot;&quot;), &quot; &quot;, &quot;&quot;));" created="Sun, 28 Feb 2021 20:09:25 GMT"/>
							<outline text="" created="Sun, 28 Feb 2021 20:02:17 GMT"/>
							<outline text="console.log (&quot;findsub: itemtext == &quot; + itemtext);" created="Sun, 28 Feb 2021 20:02:17 GMT"/>
							<outline text="" created="Sun, 28 Feb 2021 20:02:17 GMT"/>
							<outline text="if (flfullmatch) {" created="Sun, 28 Feb 2021 20:06:33 GMT">
								<outline text="if (itemtext == lookfor) {" created="Sun, 28 Feb 2021 19:55:59 GMT">
									<outline text="callback (undefined, item);" created="Sun, 28 Feb 2021 19:57:13 GMT"/>
									<outline text="return;" created="Sun, 28 Feb 2021 19:57:29 GMT"/>
									<outline text="}" created="Sun, 28 Feb 2021 19:56:07 GMT"/>
									</outline>
								<outline text="}" created="Sun, 28 Feb 2021 20:06:36 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 28 Feb 2021 20:06:37 GMT">
								<outline text="if (utils.beginsWith (itemtext, lookfor)) {" created="Sun, 28 Feb 2021 20:06:53 GMT">
									<outline text="callback (undefined, item);" created="Sun, 28 Feb 2021 19:57:13 GMT"/>
									<outline text="return;" created="Sun, 28 Feb 2021 19:57:29 GMT"/>
									<outline text="}" created="Sun, 28 Feb 2021 20:07:21 GMT"/>
									</outline>
								<outline text="}" created="Sun, 28 Feb 2021 20:06:39 GMT"/>
								</outline>
							<outline text="}" created="Sun, 28 Feb 2021 19:55:06 GMT"/>
							</outline>
						<outline text="callback ({message: &quot;Can't find the item &quot; + lookfor + &quot;.&quot;});" created="Sun, 28 Feb 2021 19:57:38 GMT"/>
						<outline text="}" created="Sun, 28 Feb 2021 19:54:46 GMT"/>
						</outline>
					<outline text="var path = theRequest.lowerpath;" created="Sun, 28 Feb 2021 19:49:48 GMT"/>
					<outline text="if (utils.beginsWith (path, &quot;/&quot;)) {" created="Sun, 28 Feb 2021 19:50:02 GMT">
						<outline text="path = utils.stringDelete (path, 1, 1);" created="Sun, 28 Feb 2021 19:50:12 GMT"/>
						<outline text="}" created="Sun, 28 Feb 2021 19:50:22 GMT"/>
						</outline>
					<outline text="var steps = path.split (&quot;/&quot;);" created="Sun, 28 Feb 2021 19:47:48 GMT"/>
					<outline text="" created="Sun, 28 Feb 2021 19:51:18 GMT"/>
					<outline text="var nomad = docserverOutline.opml.body.subs;" created="Sun, 28 Feb 2021 19:51:18 GMT"/>
					<outline text="findsub (nomad, steps [0], true, function (err, newnomad) {" created="Sun, 28 Feb 2021 19:52:47 GMT">
						<outline text="if (err) {" created="Sun, 28 Feb 2021 19:53:29 GMT">
							<outline text="console.log (err.message);" created="Sun, 28 Feb 2021 19:53:42 GMT"/>
							<outline text="}" created="Sun, 28 Feb 2021 19:53:32 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 28 Feb 2021 19:53:33 GMT">
							<outline text="findsub (newnomad.subs, steps [1], false, function (err, newnomad) {" created="Sun, 28 Feb 2021 19:54:04 GMT">
								<outline text="if (err) {" created="Sun, 28 Feb 2021 19:53:29 GMT">
									<outline text="console.log (err.message);" created="Sun, 28 Feb 2021 19:53:42 GMT"/>
									<outline text="}" created="Sun, 28 Feb 2021 19:53:32 GMT"/>
									</outline>
								<outline text="else {" created="Sun, 28 Feb 2021 19:58:53 GMT">
									<outline text="serveVerbPage (newnomad);" created="Sun, 28 Feb 2021 19:59:07 GMT"/>
									<outline text="flhandled = true;"/>
									<outline text="}" created="Sun, 28 Feb 2021 19:58:55 GMT"/>
									</outline>
								<outline text="});" created="Sun, 28 Feb 2021 19:54:21 GMT"/>
								</outline>
							<outline text="}" created="Sun, 28 Feb 2021 19:53:35 GMT"/>
							</outline>
						<outline text="});" created="Sun, 28 Feb 2021 19:53:23 GMT"/>
						</outline>
					<outline text="if (flhandled) {" created="Mon, 01 Mar 2021 17:01:58 GMT">
						<outline text="return (true);" created="Mon, 01 Mar 2021 17:01:35 GMT"/>
						<outline text="}" created="Mon, 01 Mar 2021 17:02:05 GMT"/>
						</outline>
					<outline text="" created="Mon, 01 Mar 2021 17:01:45 GMT"/>
					<outline text="switch (theRequest.lowerpath) {">
						<outline text="case &quot;/&quot;: //let the app shell handle it, not River6">
							<outline text="return (false);"/>
							</outline>
						<outline text="case &quot;/now&quot;: " created="Sat, 08 Feb 2014 16:43:58 GMT" pgfnum="37236">
							<outline text="returnPlainText (now);"/>
							<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/stats&quot;: case &quot;/stats.json&quot;:" isComment="true">
							<outline text="returnData (river6.getStats ());"/>
							<outline text="return (true);" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="default: ">
							<outline text="return (false); //not handled"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function httpReadUrl (url, callback) {" created="Mon, 20 Jan 2014 17:26:34 GMT" pgfnum="36035">
					<outline text="request (url, function (err, response, data) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (response.statusCode != 200) {">
								<outline text="const errstruct = {">
									<outline text="message: &quot;Can't read the URL, \&quot;&quot; + url + &quot;\&quot; because we received a status code of &quot; + response.statusCode + &quot;.&quot;,"/>
									<outline text="statusCode: response.statusCode"/>
									<outline text="};"/>
									</outline>
								<outline text="callback (errstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback (undefined, data);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Mon, 20 Jan 2014 17:26:49 GMT" pgfnum="36038"/>
					</outline>
				<outline text=""/>
				<outline text="function everyMinute () {">
					<outline text="}"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="}"/>
					</outline>
				<outline text="httpReadUrl (urlDocsOpml, function (err, opmltext) {" created="Sun, 28 Feb 2021 16:20:22 GMT">
					<outline text="if (err) {" created="Sun, 28 Feb 2021 16:21:10 GMT">
						<outline text="console.log (err.message);" created="Sun, 28 Feb 2021 16:21:18 GMT"/>
						<outline text="}" created="Sun, 28 Feb 2021 16:21:12 GMT"/>
						</outline>
					<outline text="else {" created="Sun, 28 Feb 2021 16:21:13 GMT">
						<outline text="opmlToJs.parseWithError (opmltext, function (err, theOutline) {">
							<outline text="if (err) {">
								<outline text="console.log (err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="docserverOutline = theOutline; //set global" created="Sun, 28 Feb 2021 17:25:32 GMT"/>
								<outline text="console.log (utils.jsonStringify (theOutline));" created="Sun, 28 Feb 2021 16:21:32 GMT"/>
								<outline text="daveappserver.start (appOptions, function (appConfig) {">
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Sun, 28 Feb 2021 16:21:15 GMT"/>
						</outline>
					<outline text="});" created="Sun, 28 Feb 2021 16:20:32 GMT"/>
					</outline>
				</outline>
			<outline text="template.html" created="Sun, 28 Feb 2021 16:40:02 GMT">
				<outline text="" created="Sun, 28 Feb 2021 16:40:04 GMT"/>
				</outline>
			</outline>
		</body>
	</opml>
